<.header>
  Backlog
  <.link patch={~p"/projects/#{@project}/backlog/new_ticket"}>
    <.button class="ml-4 text-base">Create ticket</.button>
  </.link>
</.header>

<% active_iteration_id = Enum.find_value(@iterations, &if(&1.status == "active", do: &1.id)) %>

<%= for iteration <- (@iterations ++ [nil]) do %>
  <% tickets =
    Enum.filter(
      @tickets,
      &if(iteration, do: &1.iteration_id == iteration.id, else: &1.iteration_id == nil)
    ) %>

  <%= if iteration do %>
    <div class="flex mt-2 py-2 items-baseline">
      <h2 class="font-bold">
        <%= iteration.name %>
        <span class="text-gray-700 font-normal">(<%= length(tickets) %> tickets)</span>
      </h2>

      <%= if is_nil(active_iteration_id) do %>
        <.button
          class="ml-auto"
          phx-click={JS.push("start_iteration", value: %{id: iteration.id})}
        >
          Start iteration
        </.button>
      <% end %>

      <%= if active_iteration_id == iteration.id do %>
        <.button
          class="ml-auto"
          phx-click={JS.push("complete_iteration", value: %{id: iteration.id})}
        >
          Terminate iteration
        </.button>
      <% end %>
    </div>
  <% else %>
    <div class="flex mt-2 py-2 items-baseline">
      <h2 class="font-bold">
        Backlog <span class="text-gray-700 font-normal">(<%= length(tickets) %> tickets)</span>
      </h2>

      <.link class="ml-auto" patch={~p"/projects/#{@project}/backlog/new_iteration"}>
        <.button>Create iteration</.button>
      </.link>
    </div>
  <% end %>

  <div class="flex flex-col mt-1">
    <div id={iteration && iteration.id} phx-hook="BacklogTicketDragDrop">
      <%= for ticket <- tickets do %>
        <div
          data-id={ticket.id}
          class="flex border border-gray-400 mt-[-1px] p-2 text-sm cursor-pointer hover:bg-gray-100"
        >
          <div><%= ticket.title %></div>

          <div class="ml-auto">
            <div class={[
              "rounded px-1 py-0.5 text-xs uppercase font-bold",
              case ticket.status do
                "backlog" -> "bg-gray-300"
                "open" -> "bg-green-300"
                "in_progress" -> "bg-yellow-300"
                "closed" -> "bg-red-300"
              end
            ]}>
              <%= Extick.Tickets.format_status(ticket.status) %>
            </div>
          </div>
        </div>
      <% end %>
    </div>

    <div class="flex border border-gray-400 mt-[-1px] p-2 text-sm cursor-pointer hover:bg-gray-100">
      <div class="text-gray-500">+ Create ticket</div>
    </div>
  </div>
<% end %>

<.modal
  :if={@live_action in [:new_ticket, :edit_ticket]}
  id="project-ticket-modal"
  show
  on_cancel={JS.patch(~p"/projects/#{@project}/backlog")}
>
  <.live_component
    module={ExtickWeb.TicketLive.FormComponent}
    id={@ticket.id || :new}
    title={@page_title}
    action={
      case @live_action do
        :edit_ticket -> :edit
        :new_ticket -> :new
      end
    }
    ticket={@ticket}
    patch={~p"/projects/#{@project}/backlog"}
    current_user={@current_user}
    project={@project}
  />
</.modal>

<.modal
  :if={@live_action == :new_iteration}
  id="project-iteration-modal"
  show
  on_cancel={JS.patch(~p"/projects/#{@project}/backlog")}
>
  <.live_component
    module={ExtickWeb.ProjectLive.IterationFormComponent}
    id={:new}
    title="Create iteration"
    action={:new}
    patch={~p"/projects/#{@project}/backlog"}
    current_user={@current_user}
    iteration={@iteration}
  />
</.modal>
