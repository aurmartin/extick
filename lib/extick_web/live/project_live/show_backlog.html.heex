<.header>
  Backlog
  <:actions>
    <.link patch={~p"/projects/#{@project}/backlog/new_ticket"}>
      <.button>Create ticket</.button>
    </.link>

    <.link patch={~p"/projects/#{@project}/backlog/new_iteration"}>
      <.button>Create iteration</.button>
    </.link>
  </:actions>
</.header>

<% active_iteration_id = Enum.find_value(@iterations, &if(&1.status == "active", do: &1.id)) %>

<div class="flex flex-col gap-4 mt-4">
  <%= for iteration <- (@iterations ++ [nil]) do %>
    <% tickets =
      Enum.filter(
        @tickets,
        &if(iteration, do: &1.iteration_id == iteration.id, else: &1.iteration_id == nil)
      ) %>

    <div class="border border-zinc-400 rounded p-2">
      <%= if iteration do %>
        <div class="flex">
          <h2 class="font-semibold">
            <%= iteration.name %>
            <span class="text-gray-700 text-sm font-normal">
              (<%= length(tickets) %> tickets)
            </span>
          </h2>

          <%= if is_nil(active_iteration_id) do %>
            <.button
              class="ml-auto"
              phx-click={JS.push("start_iteration", value: %{id: iteration.id})}
            >
              Start iteration
            </.button>
          <% end %>

          <%= if active_iteration_id == iteration.id do %>
            <.button
              class="ml-auto"
              phx-click={JS.push("complete_iteration", value: %{id: iteration.id})}
            >
              Terminate iteration
            </.button>
          <% end %>
        </div>
      <% else %>
        <div class="flex">
          <h2 class="font-semibold">
            Backlog
            <span class="text-gray-700 text-sm font-normal">
              (<%= length(tickets) %> tickets)
            </span>
          </h2>
        </div>
      <% end %>

      <div class="flex flex-col mt-2">
        <div
          id={(iteration && iteration.id) || "backlog"}
          phx-hook="BacklogTicketDragDrop"
          class="flex flex-col"
        >
          <%= for ticket <- Enum.take(tickets, 1000) do %>
            <div
              data-id={ticket.id}
              class="flex mt-[-1px] p-2 text-sm cursor-pointer hover:bg-gray-100 border-y border-zinc-400"
              phx-click={JS.patch(~p"/projects/#{@project}/backlog/edit_ticket/#{ticket.id}")}
            >
              <div class="mr-2 text-zinc-500"><%= ticket.id %></div>
              <div><%= ticket.title %></div>

              <div class="ml-auto">
                <div class={[
                  "rounded py-0.5 px-1 text-sm",
                  case ticket.status do
                    "in_progress" -> "bg-blue-200"
                    "done" -> "bg-green-300"
                    _ -> "bg-gray-200"
                  end
                ]}>
                  <%= Extick.Tickets.format_status(ticket.status) %>
                </div>
              </div>
            </div>
          <% end %>
        </div>

        <div class="flex p-2 text-sm cursor-pointer hover:bg-gray-100">
          <div class="text-gray-500">+ Create ticket</div>
        </div>
      </div>
    </div>
  <% end %>
</div>

<.modal
  :if={@live_action in [:new_ticket, :edit_ticket]}
  id="project-ticket-modal"
  show
  on_cancel={JS.patch(~p"/projects/#{@project}/backlog")}
>
  <.live_component
    module={ExtickWeb.TicketLive.FormComponent}
    id={@ticket.id || :new}
    title={@page_title}
    action={
      case @live_action do
        :edit_ticket -> :edit
        :new_ticket -> :new
      end
    }
    ticket={@ticket}
    patch={~p"/projects/#{@project}/backlog"}
    current_user={@current_user}
    project={@project}
  />
</.modal>

<.modal
  :if={@live_action == :new_iteration}
  id="project-iteration-modal"
  show
  on_cancel={JS.patch(~p"/projects/#{@project}/backlog")}
>
  <.live_component
    module={ExtickWeb.ProjectLive.IterationFormComponent}
    id={:new}
    title="Create iteration"
    action={:new}
    patch={~p"/projects/#{@project}/backlog"}
    current_user={@current_user}
    iteration={@iteration}
  />
</.modal>
